{"version":3,"file":"details.entry.js","mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,iBAAiB,SAAI,IAAI,SAAI;AAC7B,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AACO;AACP;AACA,mDAAmD,OAAO;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACO;AACP;AACA,mDAAmD,OAAO;AAC1D;AACA;AACA;AACA;AACA,KAAK;AACL;AACO;AACP;AACA,mDAAmD,OAAO;AAC1D;AACA;AACA;AACA;AACA,KAAK;AACL;AACO;AACP;AACA,mDAAmD,OAAO;AAC1D;AACA;AACA;AACA;AACA,KAAK;AACL;AACO;AACP;AACA,mDAAmD,OAAO;AAC1D;AACA;AACA;AACA;AACA,KAAK;AACL;AACO;AACP;AACA,mDAAmD,OAAO;AAC1D;AACA;AACA;AACA;AACA,KAAK;AACL;AACO;AACP;AACA,mDAAmD,OAAO;AAC1D;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACO;AACP;AACA,mDAAmD,OAAO;AAC1D;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;;;;;;UC1FA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;;;;;;;;ACNA,iBAAiB,SAAI,IAAI,SAAI;AAC7B,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AACA;AACsM;AACtM;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA,8DAA8D,YAAY;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,cAAc,0EAA4B;AAC1C;AACA;AACA,4BAA4B,kCAAkC;AAC9D;AACA;AACA;AACA;AACA;AACA,yDAAyD,SAAS,0BAA0B,oCAAoC,kBAAkB,wBAAwB;AAC1K;AACA,yCAAyC,0BAA0B;AACnE,kBAAkB;AAClB,+EAA+E,0BAA0B,cAAc,0BAA0B,GAAG,MAAM,oBAAoB,YAAY,WAAW,OAAO;AAC5M,iEAAiE,0BAA0B,GAAG,MAAM,oBAAoB,YAAY;AACpI,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT,KAAK;AACL;AACO;AACP;AACA,cAAc,mEAAqB;AACnC;AACA;AACA,4BAA4B,0BAA0B;AACtD;AACA;AACA;AACA;AACA;AACA,yDAAyD,SAAS,0BAA0B,4BAA4B,kBAAkB,gBAAgB;AAC1J;AACA,yCAAyC,kBAAkB;AAC3D;AACA,qEAAqE,kBAAkB;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT,KAAK;AACL;AACO;AACP;AACA,cAAc,oEAAsB;AACpC;AACA;AACA,4BAA4B,2BAA2B;AACvD;AACA;AACA;AACA;AACA;AACA,0FAA0F,MAAM,IAAI,OAAO;AAC3G,yDAAyD,SAAS,0BAA0B,6BAA6B,kBAAkB,iBAAiB;AAC5J;AACA,yCAAyC,mBAAmB;AAC5D;AACA,yFAAyF,EAAE,iBAAiB,iCAAiC;AAC7I,8BAA8B,SAAS,wCAAwC,EAAE,iDAAiD,EAAE;AACpI,2CAA2C,EAAE,yBAAyB,EAAE;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,KAAK;AACL;AACO;AACP;AACA,cAAc,6EAA+B;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,SAAS,0BAA0B,sCAAsC,kBAAkB,0BAA0B;AAC9K;AACA,yCAAyC,4BAA4B;AACrE,kBAAkB;AAClB,4EAA4E,4BAA4B,QAAQ,OAAO,oBAAoB,YAAY;AACvJ,2DAA2D,OAAO,oBAAoB,YAAY;AAClG,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,KAAK;AACL;AACO;AACP;AACA,cAAc,0DAAY;AAC1B;AACA;AACA,4BAA4B,sBAAsB;AAClD;AACA;AACA;AACA,8DAA8D,kBAAkB;AAChF,4HAA4H,kBAAkB,gDAAgD,kBAAkB;AAChN,8BAA8B;AAC9B;AACA;AACA,uCAAuC,kBAAkB,wDAAwD,kBAAkB;AACnI;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,KAAK;AACL;AACO;AACP;AACA,cAAc,2DAAa;AAC3B;AACA;AACA,4BAA4B,uBAAuB;AACnD;AACA;AACA;AACA,kEAAkE,kBAAkB;AACpF,6HAA6H,kBAAkB,gDAAgD,kBAAkB;AACjN,8BAA8B;AAC9B;AACA;AACA;AACA,uCAAuC,kBAAkB,wDAAwD,kBAAkB;AACnI;AACA,qCAAqC,mCAAmC,+BAA+B,sBAAsB;AAC7H,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,KAAK;AACL;AACO;AACP;AACA,cAAc,2DAAa;AAC3B;AACA;AACA,4BAA4B,mBAAmB;AAC/C;AACA;AACA;AACA,kEAAkE,kBAAkB;AACpF,4HAA4H,kBAAkB,gDAAgD,kBAAkB;AAChN,8BAA8B;AAC9B;AACA;AACA;AACA,uCAAuC,kBAAkB,uDAAuD,kBAAkB;AAClI;AACA,+FAA+F,cAAc,WAAW,gBAAgB,wBAAwB,UAAU,iBAAiB,iBAAiB,WAAW;AACvN,uDAAuD,sBAAsB;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,KAAK;AACL;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,eAAe;AAC3C,iCAAiC;AACjC;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,4EAA4E,iBAAiB;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACO;AACP;AACA;AACA;AACA,iEAAiE,oBAAoB;AACrF;AACA;AACA,SAAS;AACT,cAAc,yDAAW;AACzB;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,KAAK;AACL;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6FAA6F,yDAAyD;AACtJ;AACA;AACA;AACA,6FAA6F,0DAA0D;AACvJ;AACA,KAAK;AACL","sources":["webpack://phygital/./src/ts/Flow/Details/detailsRest.ts","webpack://phygital/webpack/bootstrap","webpack://phygital/webpack/runtime/define property getters","webpack://phygital/webpack/runtime/hasOwnProperty shorthand","webpack://phygital/webpack/runtime/make namespace object","webpack://phygital/./src/ts/Flow/Details/details.ts"],"sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nexport function readSingleChoiceQuestionData(flowId) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const response = yield fetch(`/api/flows/${flowId}/SingleChoiceQuestions`);\r\n        if (response.ok) {\r\n            return response.json();\r\n        }\r\n        else {\r\n            throw new Error(\"Error fetching single choice questions\");\r\n        }\r\n    });\r\n}\r\nexport function readOpenQuestionsData(flowId) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const response = yield fetch(`/api/flows/${flowId}/OpenQuestions`);\r\n        if (!response.ok) {\r\n            throw new Error(\"Error fetching open questions\");\r\n        }\r\n        return yield response.json();\r\n    });\r\n}\r\nexport function readRangeQuestionsData(flowId) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const response = yield fetch(`/api/flows/${flowId}/RangeQuestions`);\r\n        if (!response.ok) {\r\n            throw new Error(\"Error fetching range questions\");\r\n        }\r\n        return yield response.json();\r\n    });\r\n}\r\nexport function readMultipleChoiceQuestionsData(flowId) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const response = yield fetch(`/api/flows/${flowId}/MultipleChoiceQuestions`);\r\n        if (!response.ok) {\r\n            throw new Error(\"Error fetching multiple choice questions\");\r\n        }\r\n        return yield response.json();\r\n    });\r\n}\r\nexport function readTextData(flowId) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const response = yield fetch(`/api/flows/${flowId}/TextInfos`);\r\n        if (!response.ok) {\r\n            throw new Error(\"Error fetching text infos\");\r\n        }\r\n        return yield response.json();\r\n    });\r\n}\r\nexport function readImageData(flowId) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const response = yield fetch(`/api/flows/${flowId}/ImageInfos`);\r\n        if (!response.ok) {\r\n            throw new Error(\"Error fetching image infos\");\r\n        }\r\n        return yield response.json();\r\n    });\r\n}\r\nexport function readVideoData(flowId) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const response = yield fetch(`/api/flows/${flowId}/VideoInfos`);\r\n        if (!response.ok) {\r\n            throw new Error(\"Error fetching video infos\");\r\n        }\r\n        return yield response.json();\r\n    });\r\n}\r\n//TODO: fix AnswerObject type\r\nexport function sendAnswers(flowId, answerObject) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const response = yield fetch(`/api/flows/${flowId}/AddAnswers`, {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(answerObject)\r\n        });\r\n        if (!response.ok) {\r\n            throw new Error(\"Error committing answers\");\r\n        }\r\n        alert(\"Answers submitted:\" + JSON.stringify(answerObject));\r\n        return yield response.json();\r\n    });\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n//Importeren van de functies\r\nimport { readImageData, readMultipleChoiceQuestionsData, readOpenQuestionsData, readRangeQuestionsData, readSingleChoiceQuestionData, readTextData, readVideoData, sendAnswers } from './detailsRest';\r\n// elementen ophalen\r\nconst flowIdElement = document.getElementById(\"flowId\");\r\nconst flowId = flowIdElement ? parseInt(flowIdElement.innerText) : 0;\r\nconst questionsElement = document.getElementById(\"questions\");\r\nconst infoElements = document.getElementById(\"infoAccordion\");\r\nconst keys = ['Key1', 'Key2', 'Key3', 'Key4']; // voor keydown event\r\nwindow.updateLabel = function (input, labelId) {\r\n    let label = document.getElementById(labelId);\r\n    if (label) {\r\n        label.textContent = input.getAttribute(`data-option-${input.value}`);\r\n    }\r\n};\r\nwindow.totalQuestions = 0;\r\nlet firstQuestion = true;\r\nlet totalInformations = 0;\r\nwindow.currentQuestionNumber = 1;\r\n//typescript bs\r\n/*let totalQuestions: number = 0;\r\nlet currentQuestion: number = 1;*/\r\n//Functies\r\n// export function setUpQrCode(): void {\r\n//     const uriElement = document.getElementById(\"qrCodeData\");\r\n//     const uri: string | null = uriElement ? uriElement.getAttribute('data-url') : null;\r\n//     const qrCode = new QRCodeStyling({\r\n//         width: 400,\r\n//         height: 400,\r\n//         type: \"svg\",\r\n//         data: uri,\r\n//         dotsOptions: {\r\n//             color: \"#000000\",\r\n//             type: \"rounded\"\r\n//         },\r\n//         backgroundOptions: {\r\n//             color: \"#e9ebee\",\r\n//         },\r\n//         imageOptions: {\r\n//             crossOrigin: \"anonymous\",\r\n//             imageSize: 1,\r\n//             hideBackgroundDots: false,\r\n//             margin: 2\r\n//         }\r\n//     });\r\n//\r\n//     const qrCodeElement = document.getElementById(\"qrCode\");\r\n//     if (qrCodeElement) {\r\n//         qrCode.append(qrCodeElement);\r\n//     }\r\n// }\r\nexport function getSingleChoiceQuestionData() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        yield readSingleChoiceQuestionData(flowId)\r\n            .then(singleChoiceQuestions => {\r\n            let bodyData = ``;\r\n            for (let i = 0; i < singleChoiceQuestions.length; i++) {\r\n                const singleChoiceQuestion = singleChoiceQuestions[i];\r\n                window.totalQuestions += 1;\r\n                const isActive = firstQuestion ? 'active' : '';\r\n                if (firstQuestion)\r\n                    firstQuestion = false;\r\n                bodyData += `<div class=\"carousel-item ${isActive}\" data-sequence-number=\"${singleChoiceQuestion.sequenceNumber}\" data-card-id=\"${singleChoiceQuestion.id}\">\r\n            <div class=\"card-body\">\r\n                <h5 class=\"card-title\">${singleChoiceQuestion.text}</h5>\r\n                ${singleChoiceQuestion.options.map((option, index) => `<div class=\"form-check\">\r\n                    <input class=\"form-check-input\" type=\"radio\" name=\"option${singleChoiceQuestion.text}\" id=\"option${singleChoiceQuestion.text}_${index}\" data-key-index=\"${keys[index]}\" value=\"${option}\">\r\n                    <label class=\"form-check-label\" for=\"option${singleChoiceQuestion.text}_${index}\" data-key-index=\"${keys[index]}\">\r\n                        ${option}\r\n                    </label>\r\n                </div>`).join('')}\r\n            </div>\r\n        </div>`;\r\n            }\r\n            if (questionsElement) {\r\n                questionsElement.innerHTML += bodyData;\r\n            }\r\n            else {\r\n                console.error('Element with id \"questions\" not found');\r\n            }\r\n        }).catch(error => {\r\n            console.error(error);\r\n        });\r\n    });\r\n}\r\nexport function getOpenQuestionsData() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        yield readOpenQuestionsData(flowId)\r\n            .then(openQuestions => {\r\n            let bodyData = ``;\r\n            for (let i = 0; i < openQuestions.length; i++) {\r\n                const openQuestion = openQuestions[i];\r\n                window.totalQuestions += 1;\r\n                const isActive = firstQuestion ? 'active' : '';\r\n                if (firstQuestion)\r\n                    firstQuestion = false;\r\n                bodyData += `<div class=\"carousel-item ${isActive}\" data-sequence-number=\"${openQuestion.sequenceNumber}\" data-card-id=\"${openQuestion.id}\">\r\n            <div class=\"card-body\">\r\n                <h5 class=\"card-title\">${openQuestion.text}</h5>\r\n                <div class=\"form-group\">\r\n                    <textarea class=\"form-control\" id=\"openQuestion${openQuestion.text}\" rows=\"3\"></textarea>\r\n                </div>\r\n            </div>\r\n        </div>`;\r\n            }\r\n            if (questionsElement) {\r\n                questionsElement.innerHTML += bodyData;\r\n            }\r\n            else {\r\n                console.error('Element with id \"questions\" not found');\r\n            }\r\n        }).catch(error => {\r\n            console.error(error);\r\n        });\r\n    });\r\n}\r\nexport function getRangeQuestionsData() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        yield readRangeQuestionsData(flowId)\r\n            .then(rangeQuestions => {\r\n            let bodyData = ``;\r\n            for (let i = 0; i < rangeQuestions.length; i++) {\r\n                const rangeQuestion = rangeQuestions[i];\r\n                window.totalQuestions += 1;\r\n                const isActive = firstQuestion ? 'active' : '';\r\n                if (firstQuestion)\r\n                    firstQuestion = false;\r\n                let options = rangeQuestion.options.map((option, index) => `data-option-${index}=\"${option}\"`).join('');\r\n                bodyData += `<div class=\"carousel-item ${isActive}\" data-sequence-number=\"${rangeQuestion.sequenceNumber}\" data-card-id=\"${rangeQuestion.id}\">\r\n            <div class=\"card-body\">\r\n                <h5 class=\"card-title\">${rangeQuestion.text}</h5>\r\n                <div class=\"form-group\">\r\n                    <input type=\"range\" class=\"form-control-range\" id=\"formControlRange${i}\" min=\"0\" max=\"${rangeQuestion.options.length - 1}\" \r\n                            ${options} oninput=\"updateLabel(this, 'rangeLabel${i}')\"> <!--oninput=\"updateLabel(this, 'rangeLabel${i}')\"-->\r\n                    <label id=\"rangeLabel${i}\" for=\"formControlRange${i}\"></label>\r\n                </div>\r\n            </div>\r\n        </div>`;\r\n            }\r\n            if (questionsElement) {\r\n                questionsElement.innerHTML += bodyData;\r\n            }\r\n            else {\r\n                console.error('Element with id \"questions\" not found');\r\n            }\r\n        })\r\n            .catch(error => {\r\n            console.log(error);\r\n        });\r\n    });\r\n}\r\nexport function getMultipleChoiceQuestionsData() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        yield readMultipleChoiceQuestionsData(flowId)\r\n            .then(multipleChoiceQuestions => {\r\n            let bodyData = ``;\r\n            for (const multipleChoiceQuestion of multipleChoiceQuestions) {\r\n                window.totalQuestions += 1;\r\n                const isActive = firstQuestion ? 'active' : '';\r\n                if (firstQuestion)\r\n                    firstQuestion = false;\r\n                bodyData += `<div class=\"carousel-item ${isActive}\" data-sequence-number=\"${multipleChoiceQuestion.sequenceNumber}\" data-card-id=\"${multipleChoiceQuestion.id}\">\r\n            <div class=\"card-body\">\r\n                <h5 class=\"card-title\">${multipleChoiceQuestion.text}</h5>\r\n                ${multipleChoiceQuestion.options.map((option, index) => `<div class=\"form-check\">\r\n                    <input class=\"form-check-input\" type=\"checkbox\" name=\"${multipleChoiceQuestion.text}\" id=\"${option}\" data-key-index=\"${keys[index]}\">\r\n                    <label class=\"form-check-label\" for=\"${option}\" data-key-index=\"${keys[index]}\">\r\n                        ${option}\r\n                    </label>\r\n                </div>`).join('')}\r\n            </div>\r\n        </div>`;\r\n            }\r\n            if (questionsElement) {\r\n                questionsElement.innerHTML += bodyData;\r\n            }\r\n            else {\r\n                console.error('Element with id \"questions\" not found');\r\n            }\r\n        })\r\n            .catch(error => {\r\n            console.log(error);\r\n        });\r\n    });\r\n}\r\nexport function getTextData() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        yield readTextData(flowId)\r\n            .then(textInfos => {\r\n            let bodyData = ``;\r\n            for (let i = 0; i < textInfos.length; i++) {\r\n                totalInformations++;\r\n                bodyData += `\r\n                    <div class=\"accordion-item\">\r\n                    <h2 class=\"accordion-header\" id=\"heading${totalInformations}\">\r\n                        <button class=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapse${totalInformations}\" aria-expanded=\"true\" aria-controls=\"collapse${totalInformations}\">\r\n                            ${textInfos[i].title}\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapse${totalInformations}\" class=\"accordion-collapse \" aria-labelledby=\"heading${totalInformations}\" data-bs-parent=\"#infoAccordion\">\r\n                        <div class=\"accordion-body\">\r\n                            ${textInfos[i].content}\r\n                        </div>\r\n                    </div></div>`;\r\n            }\r\n            if (infoElements) {\r\n                infoElements.innerHTML += bodyData;\r\n            }\r\n            else {\r\n                console.error('Element with id \"infoAccordion\" not found');\r\n            }\r\n        })\r\n            .catch(error => {\r\n            console.log(error);\r\n        });\r\n    });\r\n}\r\nexport function getImageData() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        yield readImageData(flowId)\r\n            .then(imageInfos => {\r\n            let bodyData = ``;\r\n            for (let i = 0; i < imageInfos.length; i++) {\r\n                totalInformations++;\r\n                bodyData += `\r\n                        <div class=\"accordion-item\">\r\n                        <h2 class=\"accordion-header\" id=\"heading${totalInformations}\">\r\n                        <button class=\"accordion-button \" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapse${totalInformations}\" aria-expanded=\"true\" aria-controls=\"collapse${totalInformations}\">\r\n                            ${imageInfos[i].title}\r\n                        </button>\r\n                    </h2>\r\n                   \r\n                    <div id=\"collapse${totalInformations}\" class=\"accordion-collapse \" aria-labelledby=\"heading${totalInformations}\" data-bs-parent=\"#infoAccordion\">\r\n                        <div class=\"accordion-body\">\r\n                         <img src=\"${imageInfos[i].url.replace('~', '')}\" class=\"d-block w-100\" alt=\"${imageInfos[i].altText}\">\r\n                            ${imageInfos[i].altText}\r\n                        </div>\r\n                    </div>\r\n                    </div>`;\r\n            }\r\n            if (infoElements) {\r\n                infoElements.innerHTML += bodyData;\r\n            }\r\n            else {\r\n                console.error('Element with id \"infoAccordion\" not found');\r\n            }\r\n        })\r\n            .catch(error => {\r\n            console.log(error);\r\n        });\r\n    });\r\n}\r\nexport function getVideoData() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        yield readVideoData(flowId)\r\n            .then(videos => {\r\n            let bodyData = ``;\r\n            for (let i = 0; i < videos.length; i++) {\r\n                totalInformations++;\r\n                bodyData += `\r\n                        <div class=\"accordion-item\">\r\n                        <h2 class=\"accordion-header\" id=\"heading${totalInformations}\">\r\n                        <button class=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapse${totalInformations}\" aria-expanded=\"true\" aria-controls=\"collapse${totalInformations}\">\r\n                            ${videos[i].title}\r\n                        </button>\r\n                    </h2>\r\n                   \r\n                    <div id=\"collapse${totalInformations}\" class=\"accordion-collapse\" aria-labelledby=\"heading${totalInformations}\" data-bs-parent=\"#infoAccordion\">\r\n                        <div class=\"accordion-body\">\r\n                         <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/${videos[i].url}\" title=\"${videos[i].title}\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\r\n                            <div class=\"spacing-top\">${videos[i].description}</div>\r\n                        </div>\r\n                    </div>\r\n            </div>`;\r\n            }\r\n            if (infoElements) {\r\n                infoElements.innerHTML += bodyData;\r\n            }\r\n            else {\r\n                console.error('Element with id \"infoAccordion\" not found');\r\n            }\r\n        })\r\n            .catch(error => {\r\n            console.log(error);\r\n        });\r\n    });\r\n}\r\nexport function getAnswers() {\r\n    const answers = [];\r\n    const carouselItems = document.querySelectorAll('.carousel-item');\r\n    // Get aantal users\r\n    const rangeInput = document.getElementById('rangeInput');\r\n    const submitButton = document.getElementById('submitButton');\r\n    submitButton === null || submitButton === void 0 ? void 0 : submitButton.addEventListener('click', function () {\r\n        const userCount = parseInt(rangeInput.value);\r\n        carouselItems.forEach((item, index) => {\r\n            var _a;\r\n            const questionText = ((_a = item.querySelector('.card-title')) === null || _a === void 0 ? void 0 : _a.textContent) || '';\r\n            const questionId = Number(item.getAttribute('data-card-id') || '');\r\n            // Repeat the answer collection process for the number of users\r\n            for (let i = 0; i < userCount; i++) {\r\n                const answer = { question: questionText, chosenOptions: [], openAnswer: '', id: questionId };\r\n                const checkboxes = item.querySelectorAll('input[type=\"checkbox\"]:checked');\r\n                checkboxes.forEach(checkbox => {\r\n                    answer.chosenOptions.push(checkbox.id);\r\n                });\r\n                const textarea = item.querySelector('textarea');\r\n                if (textarea) {\r\n                    answer.openAnswer = textarea.value;\r\n                }\r\n                const radioButtons = item.querySelectorAll('input[type=\"radio\"]:checked');\r\n                radioButtons.forEach(radioButton => {\r\n                    if (radioButton.checked) {\r\n                        answer.chosenOptions.push(radioButton.value);\r\n                    }\r\n                });\r\n                const rangeInput = item.querySelector('input[type=\"range\"]');\r\n                if (rangeInput) {\r\n                    let optionText = rangeInput.getAttribute(`data-option-${rangeInput.value}`);\r\n                    if (optionText) {\r\n                        answer.chosenOptions.push(optionText);\r\n                    }\r\n                }\r\n                answers.push(answer);\r\n            }\r\n        });\r\n    });\r\n    return answers;\r\n}\r\nexport function commitAnswers() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const answers = getAnswers();\r\n        const answerObject = answers.map(answer => ({\r\n            chosenOptions: answer.chosenOptions.map(option => ({ OptionText: option })),\r\n            chosenAnswer: answer.openAnswer,\r\n            questionId: answer.id\r\n        }));\r\n        yield sendAnswers(flowId, answerObject)\r\n            .then(response => {\r\n            console.log(response);\r\n        })\r\n            .catch(error => {\r\n            console.error(error);\r\n        });\r\n    });\r\n}\r\nexport function updatePorgressBar() {\r\n    let progressPerc = 100 * (window.currentQuestionNumber / window.totalQuestions);\r\n    let progressBar = document.getElementById(\"progressBar\");\r\n    progressBar.style.width = progressPerc + \"%\";\r\n    progressBar.setAttribute(\"aria-valuenow\", progressPerc.toString());\r\n    console.log(\"progressbarPerc: \", progressPerc);\r\n}\r\nexport function handleScrollForVideoPlayback() {\r\n    let videos = document.querySelectorAll(\"iframe[id^='video']\");\r\n    videos.forEach((video) => {\r\n        var _a, _b;\r\n        let top_of_element = video.offsetTop;\r\n        let bottom_of_element = top_of_element + video.offsetHeight;\r\n        let bottom_of_screen = window.pageYOffset + window.innerHeight;\r\n        let top_of_screen = window.pageYOffset;\r\n        if ((bottom_of_screen > top_of_element) && (top_of_screen < bottom_of_element)) {\r\n            // The element is visible, play the video\r\n            (_a = video.contentWindow) === null || _a === void 0 ? void 0 : _a.postMessage('{\"event\":\"command\",\"func\":\"' + 'playVideo' + '\",\"args\":\"\"}', '*');\r\n        }\r\n        else {\r\n            // The element is not visible, pause the video\r\n            (_b = video.contentWindow) === null || _b === void 0 ? void 0 : _b.postMessage('{\"event\":\"command\",\"func\":\"' + 'pauseVideo' + '\",\"args\":\"\"}', '*');\r\n        }\r\n    });\r\n}\r\n"],"names":[],"sourceRoot":""}