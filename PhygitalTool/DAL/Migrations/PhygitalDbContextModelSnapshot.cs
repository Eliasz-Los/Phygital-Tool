// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Phygital.DAL.EF;

#nullable disable

namespace Phygital.DAL.Migrations
{
    [DbContext(typeof(PhygitalDbContext))]
    partial class PhygitalDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Accounts", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Phygital.Domain.Feedback.Like", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AccountId")
                        .HasColumnType("text");

                    b.Property<int>("LikeType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Likes", (string)null);
                });

            modelBuilder.Entity("Phygital.Domain.Feedback.Post", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AccountId")
                        .HasColumnType("text");

                    b.Property<DateTime>("PostTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<long?>("ThemeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ThemeId");

                    b.ToTable("Posts", (string)null);
                });

            modelBuilder.Entity("Phygital.Domain.Feedback.PostLike", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("LikeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PostId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("LikeId");

                    b.HasIndex("PostId");

                    b.ToTable("PostLikes", (string)null);
                });

            modelBuilder.Entity("Phygital.Domain.Feedback.PostReaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("PostId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ReactionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("PostId");

                    b.HasIndex("ReactionId");

                    b.ToTable("PostReactions", (string)null);
                });

            modelBuilder.Entity("Phygital.Domain.Feedback.Reaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AccountId")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Reactions", (string)null);
                });

            modelBuilder.Entity("Phygital.Domain.Questionsprocess.Answer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ChosenAnswer")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<long?>("MultipleChoiceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RangeQuestionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SingleChoiceQuestionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SubThemeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("flowId")
                        .HasColumnType("bigint");

                    b.Property<long?>("openQuestionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("MultipleChoiceId");

                    b.HasIndex("RangeQuestionId");

                    b.HasIndex("SingleChoiceQuestionId");

                    b.HasIndex("SubThemeId");

                    b.HasIndex("flowId");

                    b.ToTable("Answers", (string)null);
                });

            modelBuilder.Entity("Phygital.Domain.Questionsprocess.Flow", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("FlowType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("boolean");

                    b.Property<long?>("ThemeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ThemeId");

                    b.ToTable("Flow", (string)null);
                });

            modelBuilder.Entity("Phygital.Domain.Questionsprocess.FlowElement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("SubThemeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("flowId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SubThemeId");

                    b.HasIndex("flowId");

                    b.ToTable("FlowElement", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Phygital.Domain.Questionsprocess.Questions.Option", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AnswerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MultipleChoiceId")
                        .HasColumnType("bigint");

                    b.Property<string>("OptionText")
                        .HasColumnType("text");

                    b.Property<long?>("RangeQuestionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SingleChoiceQuestionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("MultipleChoiceId");

                    b.HasIndex("RangeQuestionId");

                    b.HasIndex("SingleChoiceQuestionId");

                    b.ToTable("Options", (string)null);
                });

            modelBuilder.Entity("Phygital.Domain.Session.Installation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("PostalCode")
                        .HasColumnType("integer");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.Property<int>("StreetNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Installation", (string)null);
                });

            modelBuilder.Entity("Phygital.Domain.Session.Note", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Comment")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<long?>("participationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("participationId");

                    b.ToTable("Note", (string)null);
                });

            modelBuilder.Entity("Phygital.Domain.Session.Participation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AmountOfParticipants")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("flowId")
                        .HasColumnType("bigint");

                    b.Property<long?>("sessionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("flowId");

                    b.HasIndex("sessionId");

                    b.ToTable("Participation", (string)null);
                });

            modelBuilder.Entity("Phygital.Domain.Session.Session", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SessionType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("installationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("installationId");

                    b.ToTable("Session", (string)null);
                });

            modelBuilder.Entity("Phygital.Domain.Themas.Theme", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<long?>("ThemeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ThemeId");

                    b.ToTable("Theme", (string)null);
                });

            modelBuilder.Entity("Phygital.Domain.User.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<long?>("organisationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("organisationId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Phygital.Domain.User.Organisation", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("id")
                        .IsUnique();

                    b.ToTable("Organisations", (string)null);
                });

            modelBuilder.Entity("Phygital.Domain.Questionsprocess.Info", b =>
                {
                    b.HasBaseType("Phygital.Domain.Questionsprocess.FlowElement");

                    b.Property<long?>("FlowElementId")
                        .HasColumnType("bigint");

                    b.HasIndex("FlowElementId");

                    b.ToTable("Infos", (string)null);
                });

            modelBuilder.Entity("Phygital.Domain.Questionsprocess.Questions.Question", b =>
                {
                    b.HasBaseType("Phygital.Domain.Questionsprocess.FlowElement");

                    b.Property<long?>("FlowElementId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ThemeId")
                        .HasColumnType("bigint");

                    b.HasIndex("FlowElementId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Questions", (string)null);
                });

            modelBuilder.Entity("Phygital.Domain.Questionsprocess.Image", b =>
                {
                    b.HasBaseType("Phygital.Domain.Questionsprocess.Info");

                    b.Property<string>("AltText")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.ToTable("Images", (string)null);
                });

            modelBuilder.Entity("Phygital.Domain.Questionsprocess.Text", b =>
                {
                    b.HasBaseType("Phygital.Domain.Questionsprocess.Info");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.ToTable("Texts", (string)null);
                });

            modelBuilder.Entity("Phygital.Domain.Questionsprocess.Video", b =>
                {
                    b.HasBaseType("Phygital.Domain.Questionsprocess.Info");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.ToTable("Videos", (string)null);
                });

            modelBuilder.Entity("Phygital.Domain.Questionsprocess.Questions.MultipleChoice", b =>
                {
                    b.HasBaseType("Phygital.Domain.Questionsprocess.Questions.Question");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int>("SequenceNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.ToTable("MultipleChoices", (string)null);
                });

            modelBuilder.Entity("Phygital.Domain.Questionsprocess.Questions.OpenQuestion", b =>
                {
                    b.HasBaseType("Phygital.Domain.Questionsprocess.Questions.Question");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int>("SequenceNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<long?>("answerId")
                        .HasColumnType("bigint");

                    b.HasIndex("answerId")
                        .IsUnique();

                    b.ToTable("OpenQuestions", (string)null);
                });

            modelBuilder.Entity("Phygital.Domain.Questionsprocess.Questions.RangeQuestion", b =>
                {
                    b.HasBaseType("Phygital.Domain.Questionsprocess.Questions.Question");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int>("SequenceNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.ToTable("RangeQuestions", (string)null);
                });

            modelBuilder.Entity("Phygital.Domain.Questionsprocess.Questions.SingleChoiceQuestion", b =>
                {
                    b.HasBaseType("Phygital.Domain.Questionsprocess.Questions.Question");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int>("SequenceNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.ToTable("SingleChoiceQuestions", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Phygital.Domain.User.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Phygital.Domain.User.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Phygital.Domain.User.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Phygital.Domain.User.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Phygital.Domain.Feedback.Like", b =>
                {
                    b.HasOne("Phygital.Domain.User.Account", "Account")
                        .WithMany("Likes")
                        .HasForeignKey("AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Phygital.Domain.Feedback.Post", b =>
                {
                    b.HasOne("Phygital.Domain.User.Account", "Account")
                        .WithMany("Posts")
                        .HasForeignKey("AccountId");

                    b.HasOne("Phygital.Domain.Themas.Theme", "Theme")
                        .WithMany("Posts")
                        .HasForeignKey("ThemeId");

                    b.Navigation("Account");

                    b.Navigation("Theme");
                });

            modelBuilder.Entity("Phygital.Domain.Feedback.PostLike", b =>
                {
                    b.HasOne("Phygital.Domain.Feedback.Like", "Like")
                        .WithMany("PostLikes")
                        .HasForeignKey("LikeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Phygital.Domain.Feedback.Post", "Post")
                        .WithMany("PostLikes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Like");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Phygital.Domain.Feedback.PostReaction", b =>
                {
                    b.HasOne("Phygital.Domain.Feedback.Post", "Post")
                        .WithMany("PostReactions")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Phygital.Domain.Feedback.Reaction", "Reaction")
                        .WithMany("PostReactions")
                        .HasForeignKey("ReactionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Post");

                    b.Navigation("Reaction");
                });

            modelBuilder.Entity("Phygital.Domain.Feedback.Reaction", b =>
                {
                    b.HasOne("Phygital.Domain.User.Account", "Account")
                        .WithMany("Reactions")
                        .HasForeignKey("AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Phygital.Domain.Questionsprocess.Answer", b =>
                {
                    b.HasOne("Phygital.Domain.Questionsprocess.Questions.MultipleChoice", "MultipleChoice")
                        .WithMany()
                        .HasForeignKey("MultipleChoiceId");

                    b.HasOne("Phygital.Domain.Questionsprocess.Questions.RangeQuestion", "RangeQuestion")
                        .WithMany()
                        .HasForeignKey("RangeQuestionId");

                    b.HasOne("Phygital.Domain.Questionsprocess.Questions.SingleChoiceQuestion", "SingleChoiceQuestion")
                        .WithMany()
                        .HasForeignKey("SingleChoiceQuestionId");

                    b.HasOne("Phygital.Domain.Themas.Theme", "SubTheme")
                        .WithMany()
                        .HasForeignKey("SubThemeId");

                    b.HasOne("Phygital.Domain.Questionsprocess.Flow", "Flow")
                        .WithMany("Answers")
                        .HasForeignKey("flowId");

                    b.Navigation("Flow");

                    b.Navigation("MultipleChoice");

                    b.Navigation("RangeQuestion");

                    b.Navigation("SingleChoiceQuestion");

                    b.Navigation("SubTheme");
                });

            modelBuilder.Entity("Phygital.Domain.Questionsprocess.Flow", b =>
                {
                    b.HasOne("Phygital.Domain.Themas.Theme", "Theme")
                        .WithMany("Flows")
                        .HasForeignKey("ThemeId");

                    b.Navigation("Theme");
                });

            modelBuilder.Entity("Phygital.Domain.Questionsprocess.FlowElement", b =>
                {
                    b.HasOne("Phygital.Domain.Themas.Theme", "SubTheme")
                        .WithMany("FlowElements")
                        .HasForeignKey("SubThemeId");

                    b.HasOne("Phygital.Domain.Questionsprocess.Flow", "Flow")
                        .WithMany("FlowElements")
                        .HasForeignKey("flowId");

                    b.Navigation("Flow");

                    b.Navigation("SubTheme");
                });

            modelBuilder.Entity("Phygital.Domain.Questionsprocess.Questions.Option", b =>
                {
                    b.HasOne("Phygital.Domain.Questionsprocess.Answer", "Answer")
                        .WithMany("ChosenOptions")
                        .HasForeignKey("AnswerId");

                    b.HasOne("Phygital.Domain.Questionsprocess.Questions.MultipleChoice", "MultipleChoice")
                        .WithMany("Options")
                        .HasForeignKey("MultipleChoiceId");

                    b.HasOne("Phygital.Domain.Questionsprocess.Questions.RangeQuestion", "RangeQuestion")
                        .WithMany("Options")
                        .HasForeignKey("RangeQuestionId");

                    b.HasOne("Phygital.Domain.Questionsprocess.Questions.SingleChoiceQuestion", "SingleChoiceQuestion")
                        .WithMany("Options")
                        .HasForeignKey("SingleChoiceQuestionId");

                    b.Navigation("Answer");

                    b.Navigation("MultipleChoice");

                    b.Navigation("RangeQuestion");

                    b.Navigation("SingleChoiceQuestion");
                });

            modelBuilder.Entity("Phygital.Domain.Session.Note", b =>
                {
                    b.HasOne("Phygital.Domain.Session.Participation", "Participation")
                        .WithMany("Notes")
                        .HasForeignKey("participationId");

                    b.Navigation("Participation");
                });

            modelBuilder.Entity("Phygital.Domain.Session.Participation", b =>
                {
                    b.HasOne("Phygital.Domain.Questionsprocess.Flow", "Flow")
                        .WithMany("Participations")
                        .HasForeignKey("flowId");

                    b.HasOne("Phygital.Domain.Session.Session", "Session")
                        .WithMany("Participations")
                        .HasForeignKey("sessionId");

                    b.Navigation("Flow");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Phygital.Domain.Session.Session", b =>
                {
                    b.HasOne("Phygital.Domain.Session.Installation", "Installation")
                        .WithMany("Sessions")
                        .HasForeignKey("installationId");

                    b.Navigation("Installation");
                });

            modelBuilder.Entity("Phygital.Domain.Themas.Theme", b =>
                {
                    b.HasOne("Phygital.Domain.Themas.Theme", null)
                        .WithMany("SubThemas")
                        .HasForeignKey("ThemeId");
                });

            modelBuilder.Entity("Phygital.Domain.User.Account", b =>
                {
                    b.HasOne("Phygital.Domain.User.Organisation", "Organisation")
                        .WithMany("Accounts")
                        .HasForeignKey("organisationId");

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("Phygital.Domain.Questionsprocess.Info", b =>
                {
                    b.HasOne("Phygital.Domain.Questionsprocess.FlowElement", null)
                        .WithMany("Infos")
                        .HasForeignKey("FlowElementId");

                    b.HasOne("Phygital.Domain.Questionsprocess.FlowElement", null)
                        .WithOne()
                        .HasForeignKey("Phygital.Domain.Questionsprocess.Info", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Phygital.Domain.Questionsprocess.Questions.Question", b =>
                {
                    b.HasOne("Phygital.Domain.Questionsprocess.FlowElement", null)
                        .WithMany("Questions")
                        .HasForeignKey("FlowElementId");

                    b.HasOne("Phygital.Domain.Questionsprocess.FlowElement", null)
                        .WithOne()
                        .HasForeignKey("Phygital.Domain.Questionsprocess.Questions.Question", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Phygital.Domain.Themas.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId");

                    b.Navigation("Theme");
                });

            modelBuilder.Entity("Phygital.Domain.Questionsprocess.Image", b =>
                {
                    b.HasOne("Phygital.Domain.Questionsprocess.Info", null)
                        .WithOne()
                        .HasForeignKey("Phygital.Domain.Questionsprocess.Image", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Phygital.Domain.Questionsprocess.Text", b =>
                {
                    b.HasOne("Phygital.Domain.Questionsprocess.Info", null)
                        .WithOne()
                        .HasForeignKey("Phygital.Domain.Questionsprocess.Text", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Phygital.Domain.Questionsprocess.Video", b =>
                {
                    b.HasOne("Phygital.Domain.Questionsprocess.Info", null)
                        .WithOne()
                        .HasForeignKey("Phygital.Domain.Questionsprocess.Video", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Phygital.Domain.Questionsprocess.Questions.MultipleChoice", b =>
                {
                    b.HasOne("Phygital.Domain.Questionsprocess.Questions.Question", null)
                        .WithOne()
                        .HasForeignKey("Phygital.Domain.Questionsprocess.Questions.MultipleChoice", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Phygital.Domain.Questionsprocess.Questions.OpenQuestion", b =>
                {
                    b.HasOne("Phygital.Domain.Questionsprocess.Questions.Question", null)
                        .WithOne()
                        .HasForeignKey("Phygital.Domain.Questionsprocess.Questions.OpenQuestion", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Phygital.Domain.Questionsprocess.Answer", "Answer")
                        .WithOne("OpenQuestion")
                        .HasForeignKey("Phygital.Domain.Questionsprocess.Questions.OpenQuestion", "answerId");

                    b.Navigation("Answer");
                });

            modelBuilder.Entity("Phygital.Domain.Questionsprocess.Questions.RangeQuestion", b =>
                {
                    b.HasOne("Phygital.Domain.Questionsprocess.Questions.Question", null)
                        .WithOne()
                        .HasForeignKey("Phygital.Domain.Questionsprocess.Questions.RangeQuestion", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Phygital.Domain.Questionsprocess.Questions.SingleChoiceQuestion", b =>
                {
                    b.HasOne("Phygital.Domain.Questionsprocess.Questions.Question", null)
                        .WithOne()
                        .HasForeignKey("Phygital.Domain.Questionsprocess.Questions.SingleChoiceQuestion", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Phygital.Domain.Feedback.Like", b =>
                {
                    b.Navigation("PostLikes");
                });

            modelBuilder.Entity("Phygital.Domain.Feedback.Post", b =>
                {
                    b.Navigation("PostLikes");

                    b.Navigation("PostReactions");
                });

            modelBuilder.Entity("Phygital.Domain.Feedback.Reaction", b =>
                {
                    b.Navigation("PostReactions");
                });

            modelBuilder.Entity("Phygital.Domain.Questionsprocess.Answer", b =>
                {
                    b.Navigation("ChosenOptions");

                    b.Navigation("OpenQuestion");
                });

            modelBuilder.Entity("Phygital.Domain.Questionsprocess.Flow", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("FlowElements");

                    b.Navigation("Participations");
                });

            modelBuilder.Entity("Phygital.Domain.Questionsprocess.FlowElement", b =>
                {
                    b.Navigation("Infos");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Phygital.Domain.Session.Installation", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("Phygital.Domain.Session.Participation", b =>
                {
                    b.Navigation("Notes");
                });

            modelBuilder.Entity("Phygital.Domain.Session.Session", b =>
                {
                    b.Navigation("Participations");
                });

            modelBuilder.Entity("Phygital.Domain.Themas.Theme", b =>
                {
                    b.Navigation("FlowElements");

                    b.Navigation("Flows");

                    b.Navigation("Posts");

                    b.Navigation("SubThemas");
                });

            modelBuilder.Entity("Phygital.Domain.User.Account", b =>
                {
                    b.Navigation("Likes");

                    b.Navigation("Posts");

                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("Phygital.Domain.User.Organisation", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Phygital.Domain.Questionsprocess.Questions.MultipleChoice", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("Phygital.Domain.Questionsprocess.Questions.RangeQuestion", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("Phygital.Domain.Questionsprocess.Questions.SingleChoiceQuestion", b =>
                {
                    b.Navigation("Options");
                });
#pragma warning restore 612, 618
        }
    }
}
